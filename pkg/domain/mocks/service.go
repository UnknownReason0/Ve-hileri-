// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opencars/bot/pkg/domain (interfaces: VehicleService,MessageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/opencars/bot/pkg/domain/model"
)

// MockVehicleService is a mock of VehicleService interface.
type MockVehicleService struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleServiceMockRecorder
}

// MockVehicleServiceMockRecorder is the mock recorder for MockVehicleService.
type MockVehicleServiceMockRecorder struct {
	mock *MockVehicleService
}

// NewMockVehicleService creates a new mock instance.
func NewMockVehicleService(ctrl *gomock.Controller) *MockVehicleService {
	mock := &MockVehicleService{ctrl: ctrl}
	mock.recorder = &MockVehicleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleService) EXPECT() *MockVehicleServiceMockRecorder {
	return m.recorder
}

// FindByImage mocks base method.
func (m *MockVehicleService) FindByImage(arg0 context.Context, arg1 string) (*model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByImage", arg0, arg1)
	ret0, _ := ret[0].(*model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByImage indicates an expected call of FindByImage.
func (mr *MockVehicleServiceMockRecorder) FindByImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByImage", reflect.TypeOf((*MockVehicleService)(nil).FindByImage), arg0, arg1)
}

// FindByNumber mocks base method.
func (m *MockVehicleService) FindByNumber(arg0 context.Context, arg1 string) (*model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNumber", arg0, arg1)
	ret0, _ := ret[0].(*model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNumber indicates an expected call of FindByNumber.
func (mr *MockVehicleServiceMockRecorder) FindByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNumber", reflect.TypeOf((*MockVehicleService)(nil).FindByNumber), arg0, arg1)
}

// FindByVIN mocks base method.
func (m *MockVehicleService) FindByVIN(arg0 context.Context, arg1 string) (*model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVIN", arg0, arg1)
	ret0, _ := ret[0].(*model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVIN indicates an expected call of FindByVIN.
func (mr *MockVehicleServiceMockRecorder) FindByVIN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVIN", reflect.TypeOf((*MockVehicleService)(nil).FindByVIN), arg0, arg1)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageService) Create(arg0 context.Context, arg1 *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), arg0, arg1)
}
